#!/bin/bash
#
# Move a directory into a local Virtual Machine for testing purposes.
# ==================================================================
#
# The directory in question is a datestamped directory that contains the entire
# `html` directory (i.e. document root) from a backed-up Apache server. Moving
# these files into a VM with an appropriately configured `/etc/hosts` file
# allows the integrity of the backed-up sites to be easily checked.
#
# This script also moves backed up MySQL files (originally created by `mysqldump`)
# to a staging directory on the VM - from here, they can be easily imported.
#
# The script was developed for use on Ubuntu 16.04 Xenial Xerus desktop and uses
# [Zenity](https://help.gnome.org/users/zenity/stable/intro.html.en) to create
# user dialogues.
#
# Usage:
# ------
#
# - Add `move-backups` to `usr/local/bin`: `mv move-backups /usr/local/bin`
# - Make executable: `chmod +x /usr/local/bin/move-backups`
# - Run `move-backups` in a terminal and follow instructions
#
# When prompted, you should select a directory that contains the backed-up `html`
# directory from the Apache doc root - the directory that is normally located
# at `/var/www/` in a standard Apache setup.
#
# Note that the moved files won't do anything unless you also import the
# associated databases to the guest machine. There's a companion script for this.
#
# Requirements
# ------------
# [KVM][1] is required for the Virtual Machine.
# In my case, the VM runs Ubuntu 16.04 Xenial Xerus desktop - desktop rather
# than server because it allows easy checking of the moved sites. To achieve
# this, the guest machine hosts file (`/etc/hosts`) must be set up properly to point at the
# local copies.
#
# Resources
# ---------
# * [Closing the VM](https://www.virtualbox.org/manual/ch08.html#vboxmanage-controlvm)
# * [Get path of a filename](http://stackoverflow.com/a/10274182)
# * [Starting the VM from a script](https://www.virtualbox.org/manual/ch08.html#vboxmanage-startvm)
# * [Remove trailing slash](http://stackoverflow.com/a/19485757)
# * [VM Management](http://ubuntuforums.org/archive/index.php/t-1078689.html)
# ------------------------------------------------------------------------------
# set -e
# keep track of the last executed command
trap 'last_command=$current_command; current_command=$BASH_COMMAND' DEBUG
# echo an error message before exiting
trap 'echo "\"${last_command}\" command filed with exit code $?."' EXIT

SOURCE=$HOME/backup-check-tempfiles
SQL_DESTINATION=david@192.168.122.103:staging
HTML_DESTINATION=root@192.168.122.103:/var/www/html
VM=goldfish
SQL_EXCLUDE=$HOME/.config/check-backups # rsync excludes are controlled in a file

# Start the Virtual Machine - for headless, append --type headless
# ------------------------------------------------------------------------------
echo "Starting $VM virtual machine."
RUNNING=$(virsh domstate "$VM")
if [[ "$RUNNING" == "shut off" ]]; then
	virsh start "$VM"
	START_TIME=$SECONDS
	CONNECTION=1
	while [[ $CONNECTION -ne 0 ]]; do
		ELAPSED_TIME=$((SECONDS - START_TIME))
		echo "Seconds elapsed: $ELAPSED_TIME"
		ssh -q david@192.168.122.103 exit
		CONNECTION=$?
		# CONNECTION=$(ssh -q david@192.168.122.103 exit)
		if (( $ELAPSED_TIME > 30 )) ; then
			echo "The VM is taking too long to start. There is probably a problem."
			exit 1
		fi
	done
fi

# Sync HTML directories INDIVIDUALLY
# ------------------------------------------------------------------------------
HTML_DIRS=($SOURCE/html)
# Loop through Directories only
for DIR in $HTML_DIRS/*/; do
	# For our rsync setup, the source directory MUST NOT have a trailing slash -
	# so that if the directory doesn't exist, it will be created.
	SOURCE_DIR=${DIR%/}

	# basename of the $DIR - used as the destination directory, under `/var/www/html`
	DEST_DIR=$(basename $DIR)
	#rsync -azv --progress --delete $SOURCE_DIR $HTML_DESTINATION/$DEST_DIR
	rsync -azv --progress --delete $SOURCE_DIR $HTML_DESTINATION
done

# Sync SQL backups to a staging directory
# ------------------------------------------------------------------------------
rsync -azv --rsync-path="mkdir -p $SQL_DESTINATION && rsync" --exclude-from=$SQL_EXCLUDE --progress --delete $SOURCE/sql/ $SQL_DESTINATION/sql

read -p "Sync complete. Do you want to shut down the VM? [N/y]" SHUTDOWN
if [[ ${SHUTDOWN} =~ [yY](es)* ]]; then
	# Close up the VM, maintain state
	virsh shutdown "$VM"
	echo "$VM was closed to a saved state"
else
	echo "Exiting. The $VM is still running."
fi
